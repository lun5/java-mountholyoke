/**HangmanGUI.javaCS101Luong Nguyen**/// IOimport java.io.BufferedReader;import java.io.InputStreamReader;import java.io.IOException;// for integer parsing//import java.lang.NumberFormatException;/*** Description of class.* InteractiveHangman is a program that allows user to play Hangman* by typing input using keyboard**/public class InteractiveHangman {	/********************** INSTANCE PROPERTIES *********************/		// user-defined instance properties for this class go here	//declare an instance of HangmanGame class	private  HangmanGame hangmanGame;		/************************ INSTANCE METHODS **********************/	/**	* Constructor	**/	public  InteractiveHangman() {		//create an instance of HangmanGame class		hangmanGame=new HangmanGame() ;		// wrap input stream read input from user				BufferedReader in = 		new BufferedReader( new InputStreamReader( System.in ) );		// prompt the hidden word to the user		System.out.println( "I am thinking about a fruit, can you guess it?");		// print out the hidden word		System.out.println(hangmanGame.getCurrentGuess());		// prompt the user for input		System.out.println( "Please enter a single lowercase letter" ); 				// I/O almost always requires a try/catch		// block as exceptions may be thrown 				try 		{			//if the game is still on			while (! hangmanGame.gameOver()){				//get input and store it at variable line				String line =  in.readLine(); 								//if the line is not of correct format				if (incorrectFormat(line)){					//print message that expect a lowercase					System.out.println("Please enter a single lowercase letter");				}else{ 					//call the guessLetter function on user input					// to update the currentGuess and strikes property of hangmanGame					hangmanGame.guessLetter(userInput); 					// refresh the game 					refreshGame();				}							}						// catch I/O exception			catch ( IOException ioe )			{				// tell exception to print its error log				ioe.printStackTrace();			}		}				// additional instance methods go here				/**incorrect format take in the input string 		*return true if it is not of correct format		i.e. not a lower case letter**/				public boolean incorrectFormat (String s){			// if there is more than 1 char, return true			if (s.length()>1) return true;			// if the char is not a lower case letter			// check by unicode point			// lower case letter ranging from 97-122			else if (s.codePointAt(0)>122||s.codePointAt(0)<97)				return true;			//otherwise, it is of correct format			else return false;		}				//refreshGame takes in no parameters and has a void return type		public  void refreshGame() {			// print out the current guess by calling getCurrentGuess			System.out.println( "The current guess is " 				+ hangmanGame.getCurrentGuess());			// print out the remaining strikes that user still has			System.out.println( "The remaining strike is " + Integer.toString( 				hangmanGame.numberOfRemainingStrikes() ) );			revealAnswer();		}						//revealAnswer takes in no parameters and has a void return type		public  void revealAnswer() {			//Update GUI to reveal the correct answer			if (hangmanGame.gameWon()) {				System.out.println("Congratulation, you won");				System.out.println( "The correct answer is " 					+ hangmanGame.getAnswer());			} else if (hangmanGame.gameOver()&&! hangmanGame.gameWon()) {				System.out.println("Sorry, try again latter");				System.out.println( "The correct answer is " 					+ hangmanGame.getAnswer());			}		}				/**		* Special main method is run when the program		* is executed.		**/		public static void main( String[] args )		{			// create a new instance to start the code			new InteractiveHangmana();		} // end main											}}