/**HangmanGame.javaCS101Luong NguyenThis file contains the setting of the game, including the word to be guess and the array showing the result after each guess**/public  class HangmanGame {	/********************** INSTANCE PROPERTIES *********************/	// user-defined instance properties for this class go here	//dictionary store an instance of Dictionary class	private Dictionary dictionary;	//arrayFunctions stores an instance of ArrayFunctions class	private ArrayFunctions arrayFunctions;		//the allowed number of strikes	private  int NUMBER_STRIKES=7;	//array in which each index contains a single letter in the hidden word 	private  char currentWord[];	//array of Booleans, where index i is true 	//if the user has correctly guessed the letter at that index	private  boolean currentGuess;	//the current number of strikes against the player 	private  int strikes=0;		/************************ INSTANCE METHODS **********************/	/**	* Constructor	**/	public  HangmanGame() {		//initialize the instance property dictionary to a new instance 		//of the Dictionary class		dictionary = new Dictionary() ;		//initialize the instance property arrayFunctions to		//a new instance of the ArrayFunctions class		arrayFunctions = new ArrayFunctions()  ;		//call the initGame instance method		initGame();	}		// additional instance methods go here	//initGame takes no parameters and has a void return	//initialization of the game "logic" 	public  void initGame(){		//randomly choose a word from the "dictionary"		String word= dictionary.randomWord();		//create currentWord array of type char and same length as word		// Each slot stores a letter of word		currentWord = new char[word.length()];		//create the currentGuess array of char and same length as word		//each slot holds a false for a hidden char		currentGuess=new boolean[word.length()];		//assign variables accordingly 		for ( int i=0; i<word.length(); i++) {			currentWord[i]=word.charAt(i);		}		//initialized the currentGuess array by function initGuess		initGuess();		//trace ("current word is "+currentWord);		//trace ("current guess is "+currentGuess);	}		/**initGuess takes in no parameters and has a void return	it is "helper"  for initGame that creates a new Array for the currentGuess 	variable and initializes all the slots to false (nothing has been guessed yet) 	**/	public  void initGuess() {		for ( int i=0; i<Array.getLength(currentWord); i++) {			//initialize all the slots to false (nothing has been guessed yet) 			currentGuess[i]=false;		}	}			//guessLetter takes in a single parameter of type String and has a void return	//this should update the currentGuess & strikes by checking the currentWord	public  void guessLetter(String inString) {		int match=0;//store the number of matched letters		//check the currentWord		for (int i=0; i<Array.getLength(currentWord); i++) {			//if the letter was found the update the currentGuess array			if (inString.equals(currentWord[i])) {				//trace ("found a match!");				//update currentGuess				currentGuess[i]=true;				//update match				match++;			}		}		//if the letter was not found		if (match==0) {			//update the number of strikes			strikes++;		}		//trace ("number of strike " + strikes);		//trace ("current guess is " + currentGuess);	}		/**	getCurrentGuess takes in no parameters and returns a String	the returned String has ? for unrevealed letters	this  should "walk over" the currentWord and 	currentGuess Arrays and create the String accordingly	**/		public  String getCurrentGuess() {		/**guessWord holds the value of the return String		the length of guessWord is the same as currentWord		each slot holds a char, either ? or a letter		**/		char guessWord[] = new char[Array.getLength(currentWord)];		//walk through the array currentWord		for ( int i=0; i<Array.getLength(currentWord); i++) {			//if there is a false at index i in currentGuess			if (! currentGuess[i]) {				//put in a "?" in that slot				guessWord[i]="?";				//if there is a true at index i in currentGuess, 			} else {				//put in the char at currentWord[i] in that slot				guessWord[i]=currentWord[i];			}		}		//trace ("guess word is " + guessWord);		return arrayFunctions.array2String(guessWord);	}		//numberOfStrikes takes in no parameters and 	//returns an int of the number of strikes against the player so far	public  int numberOfStrikes() {		return strikes;	}		//numberOfRemainingStrikes takes in no parameters and 	//returns an int of the number of remaining strikes the player has left	public  int numberOfRemainingStrikes() {		return NUMBER_STRIKES-numberOfStrikes();	}		//getAnswer takes no parameters and returns a String that is the hidden word	public  String getAnswer() {		return arrayFunctions.array2String(currentWord);	}		//gameOver takes no parameters and returns 	//a Boolean that is true if the game is over (either won or lost)	public  boolean gameOver() {		//if number of remaining strikes is 0, games is over		if (numberOfRemainingStrikes()==0) {			return true;			//or if the word is found the game is over		} else if (getCurrentGuess().equals(getAnswer())) {			return true;			//otherwise, the game is on		} else {			return false;		}	}		//gameWon takes no parameters and returns a Boolean 	//that is true if the player has won (guessed all the letters in the word) 	public  boolean gameWon() {		//if the game is over and user found the word		if (gameOver()&&getCurrentGuess().equals(getAnswer())) {			//then user won			return true;		} else {			//else she lost			return false;		}	}}